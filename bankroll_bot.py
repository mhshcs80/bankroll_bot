import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Bot API Token (IDE √çRD BE A TOKENED)
API_TOKEN = '8155014777:AAEwMDwt5e2Hqqkf1lPNr9xAb3XAVcWhNe0'

# Bankroll f√°jl neve
BANKROLL_FILE = "bankroll.txt"

# Bankroll bet√∂lt√©se f√°jlb√≥l
def load_bankroll():
    if os.path.exists(BANKROLL_FILE):
        with open(BANKROLL_FILE, "r") as file:
            return int(file.read())
    return 100000  # Alap√©rtelmezett bankroll

# Bankroll ment√©se f√°jlba
def save_bankroll(value):
    with open(BANKROLL_FILE, "w") as file:
        file.write(str(value))

# Bankroll kezd≈ë√©rt√©k bet√∂lt√©se
bankroll = load_bankroll()

# Bankroll lek√©rdez√©se
async def get_bankroll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Jelenlegi bankroll: {bankroll} Ft.")

# Fogad√°s hozz√°ad√°sa
async def add_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bankroll
    try:
        t√©t = int(context.args[0])
        odds = float(context.args[1])
        eredm√©ny = context.args[2].lower()

        if eredm√©ny == "nyer":
            nyerem√©ny = t√©t * odds
            bankroll += nyerem√©ny
            save_bankroll(bankroll)
            √ºzenet = f"Nyerem√©ny: {nyerem√©ny:.2f} Ft. √öj bankroll: {bankroll:.2f} Ft."
        elif eredm√©ny == "vesz√≠t":
            bankroll -= t√©t
            save_bankroll(bankroll)
            √ºzenet = f"Vesztes√©g: {t√©t} Ft. √öj bankroll: {bankroll:.2f} Ft."
        else:
            √ºzenet = "Hib√°s eredm√©ny! Csak 'nyer' vagy 'vesz√≠t' lehet."

        await update.message.reply_text(√ºzenet)
    except IndexError:
        await update.message.reply_text("Haszn√°lat: /add_bet <t√©t> <odds> <nyer/vesz√≠t>")
    except ValueError:
        await update.message.reply_text("K√©rlek, helyes form√°tumot adj meg (pl. /add_bet 1000 2.5 nyer)")

# 5%-os t√©t egys√©g kisz√°m√≠t√°sa
async def auto_bet_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bet_unit = bankroll * 0.05
    await update.message.reply_text(f"Az aktu√°lis bankroll alapj√°n az 5%-os t√©t egys√©g: {bet_unit:.2f} Ft.")

# Bankroll manu√°lis friss√≠t√©se
async def set_bankroll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bankroll
    try:
        √∫j_√©rt√©k = int(context.args[0])
        bankroll = √∫j_√©rt√©k
        save_bankroll(bankroll)
        await update.message.reply_text(f"Az √∫j bankroll √©rt√©ke: {bankroll} Ft.")
    except (IndexError, ValueError):
        await update.message.reply_text("Haszn√°lat: /set_bankroll <√∫j √©rt√©k>")

# Parancsok list√°z√°sa
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ **Bankroll Bot Parancsok**:\n\n"
        "/bankroll - Jelenlegi bankroll lek√©rdez√©se\n"
        "/add_bet <t√©t> <odds> <nyer/vesz√≠t> - Fogad√°s hozz√°ad√°sa\n"
        "/bet_unit - 5%-os t√©t egys√©g kisz√°m√≠t√°sa\n"
        "/set_bankroll <√∫j √©rt√©k> - Bankroll manu√°lis be√°ll√≠t√°sa\n"
        "/help - Parancsok list√°j√°nak megjelen√≠t√©se\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# Start parancs
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("√údv√∂z√∂llek a Bankroll Botban! √çrd be a /help parancsot a funkci√≥k list√°j√°hoz.")
    await show_help(update, context)

# Program f≈ëf√ºggv√©ny
def main():
    application = Application.builder().token(API_TOKEN).build()

    # Parancsok regisztr√°l√°sa
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CommandHandler("bankroll", get_bankroll))
    application.add_handler(CommandHandler("add_bet", add_bet))
    application.add_handler(CommandHandler("bet_unit", auto_bet_unit))
    application.add_handler(CommandHandler("set_bankroll", set_bankroll))

    # Bot ind√≠t√°sa
    application.run_polling()

if __name__ == "__main__":
    main()
